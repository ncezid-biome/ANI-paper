{
  "tasks": [
    {
      "task": "ogs.annotate.rb",
      "description": ["Annotates Orthology Groups (OGs) using one or more",
        "reference genomes."],
      "see_also": ["ogs.mcl.rb"],
      "help_arg": "--help",
      "options": [
        {
	  "name": "Input file",
	  "opt": "--in",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": ["Input file containing the OGs (as generated by",
	    "ogs.mcl.rb)."]
	},
	{
	  "name": "Output file",
	  "opt": "--out",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "Output file containing the annotated OGs."
	},
	{
	  "name": "Annotations",
	  "opt": "-a",
	  "arg": "in_file",
	  "mandatory": true,
	  "multiple_sep": ",",
	  "description": ["Input file(s) containing the annotations. One or",
	    "more tab-delimited files with the gene names in the first column",
	    "and the annotation in the second."]
	},
	{
	  "opt": "--format",
	  "arg": "string",
	  "default": "(\\S+)\\.txt",
	  "description": ["Format of the filenames for the annotation files,",
	    "using regex syntax."]
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.core-pan.rb",
      "description": ["Subsamples the genomes in a set of Orthology Groups",
        "(OGs) and estimates the trend of core genome and pangenome sizes."],
      "help_arg": "--help",
      "requires": [
        {
	  "ruby_gem": "json"
	}
      ],
      "see_also": ["ogs.mcl.rb"],
      "options": [
        {
	  "opt": "--ogs",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "Input file containing the precomputed OGs."
	},
	{
	  "opt": "--summary",
	  "arg": "out_file",
	  "description": ["Output file in tabular format with summary",
	    "statistics."]
	},
	{
	  "opt": "--tab",
	  "arg": "out_file",
	  "description": "Output file in tabular format."
	},
	{
	  "opt": "--json",
	  "arg": "out_file",
	  "description": "Output file in JSON format."
	},
	{
	  "opt": "--replicates",
	  "arg": "integer",
	  "description": "Number of replicates to estimate.",
	  "default": 100
	},
	{
	  "opt": "--threads",
	  "arg": "integer",
	  "description": "Children threads to spawn."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.extract.rb",
      "description": ["Extracts sequences of Orthology Groups (OGs) from",
        "genomes (proteomes)."],
      "help_arg": "--help",
      "see_also": ["ogs.mcl.rb"],
      "options": [
        {
	  "name": "Input file",
	  "opt": "--in",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": ["Input file containing the OGs (as generated by",
	    "ogs.mcl.rb)."]
	},
	{
	  "name": "Output file",
	  "opt": "--out",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "Output directory where to place extracted sequences."
	},
	{
	  "name": "Sequences",
	  "opt": "--seqs",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": ["Path to the proteomes in FastA format, using '%s'",
	    "to denote the genome. For example: /path/to/seqs/%s.faa."]
	},
	{
	  "opt": "--core",
	  "arg": "float",
	  "description": ["Use only OGs present in at least this fraction of",
	    "the genomes. To use only the strict core genome*, use --core 1."],
	  "note": ["* To use only the unus genome (OGs with exactly one gene",
	    "per genome), use: --core 1 --duplicates 1."]
	},
	{
	  "opt": "--duplicates",
	  "arg": "integer",
	  "description": ["Use only OGs with less than this number of",
	    "in-paralogs in a genome. To use only genes without in-paralogs*,",
	    "use --duplicates 1."],
	  "note": ["* To use only the unus genome (OGs with exactly one gene",
	    "per genome), use: --core 1 --duplicates 1."]
	},
	{
	  "opt": "--per-genome",
	  "description": ["If set, the output is generated per genome. By",
	    "default, the output is per OG."]
	},
	{
	  "opt": "--prefix",
	  "description": ["If set, each sequence is prefixed with the genome",
	    "name (or OG number, if --per-genome) and a dash."]
	},
	{
	  "opt": "--rand",
	  "description": ["Get only one gene per genome per OG (random)",
	    "regardless of in-paralogs. By default all genes are extracted."]
	},
	{
	  "opt": "--first",
	  "description": ["Get only one gene per genome per OG (first)",
	    "regardless of in-paralogs. By default all genes are extracted.",
            "Takes precedence over --rand."]
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.mcl.rb",
      "description": ["Identifies Orthology Groups (OGs) in Reciprocal Best",
        "Matches (RBM) between all pairs in a collection of genomes, using the",
	"Markov Cluster Algorithm."],
      "see_also": ["ogs.annotate.rb", "ogs.core-pan.rb", "ogs.extract.rb",
        "ogs.stats.rb"],
      "cite": [["Enright et al, 2002, NAR",
        "http://dx.doi.org/10.1093/nar/30.7.1575"]],
      "help_arg": "--help",
      "options": [
        {
	  "opt": "--out",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "Output file containing the detected OGs."
	},
	{
	  "opt": "--dir",
	  "arg": "in_dir",
	  "description": "Directory containing the RBM files.",
	  "note": "Mandatory, unless --abc is set to a non-empty file."
	},
	{
	  "opt": "--format",
	  "arg": "string",
	  "description": ["Format of the filenames for the RBM files (within",
	    "--dir), using regex syntax."],
	  "default": "(\\S+)-(\\S+)\\.rbm"
	},
	{
	  "opt": "--inflation",
	  "arg": "float",
	  "description": "Inflation parameter for MCL clustering.",
	  "default": 1.5
	},
	{
	  "opt": "--blind",
	  "description": ["If set, computes clusters without taking bitscore",
	    "into account."]
	},
	{
	  "opt": "--evalue",
	  "description": ["If set, uses the e-value to weight edges, instead",
	    "of the default Bit-Score."]
	},
	{
	  "opt": "--identity",
	  "description": ["If set, uses the identity to weight edges, instead",
	    "of the default Bit-Score."]
	},
	{
	  "opt": "--best-match",
	  "description": ["If set, it assumes best-matches instead reciprocal",
	    "best matches."]
	},
	{
	  "opt": "--mcl-bin",
	  "arg": "in_dir",
	  "description": ["Path to the directory containing the mcl binaries.",
	    "By default, assumed to be in the PATH."]
	},
	{
	  "name": "abc",
	  "arg": "out_file",
	  "opt": "--abc",
	  "description": "Use this abc file instead of a temporal file."
	},
	{
	  "opt": "--threads",
	  "arg": "integer",
	  "default": 2,
	  "description": "Number of threads to use."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.rb",
      "description": ["Identifies Orthology Groups (OGs) in Reciprocal Best",
        "Matches (RBM) between all pairs in a collection of genomes."],
      "warn": ["This script suffers from chaining effect and is very",
        "sensitive to spurious connections, because it applies a greedy",
	"clustering algorithm. For most practical purposes, the use of this",
	"script is discouraged and `ogs.mcl.rb` should be preferred."],
      "help_arg": "--help",
      "see_also": ["ogs.mcl.rb"],
      "options": [
        {
	  "opt": "--out",
	  "mandatory": true,
	  "arg": "out_file",
	  "description": "Output file containing the detected OGs."
	},
	{
	  "opt": "--dir",
	  "arg": "in_dir",
	  "description": "Directory containing the RBM files.",
	  "note": "Required unless --pre-ogs is passed."
	},
	{
	  "opt": "--pre-ogs",
	  "arg": "in_file",
	  "multiple_sep": ",",
	  "description": "Pre-computed OGs file(s), separated by commas."
	},
	{
	  "opt": "--unchecked",
	  "description": "Do not check internal redundancy in OGs."
	},
	{
	  "opt": "--format",
	  "arg": "string",
	  "default": "(\\S+)-(\\S+)\\.rbm",
	  "description": ["Format of the filenames for the RBM files (within",
	    "-d), using regex syntax."]
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.stats.rb",
      "description": ["Estimates some descriptive statistics on a set of",
        "Orthology Groups (OGs)."],
      "see_also": ["ogs.mcl.rb"],
      "help_arg": "--help",
      "requires": [ { "ruby_gem": "json" } ],
      "options": [
        {
	  "opt": "--ogs",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "Input file containing the precomputed OGs."
	},
	{
	  "opt": "--json",
	  "arg": "out_file",
	  "description": "Output file in JSON format."
	},
	{
	  "opt": "--tab",
	  "arg": "out_file",
	  "description": "Output file in tabular format."
	},
	{
	  "opt": "--transposed-tab",
	  "arg": "out_file",
	  "description": "Output file in transposed tabular format."
	},
	{
	  "opt": "--auto",
	  "description": "Run completely quiertly (no STDERR or STDOUT)."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "clust.rand.rb",
      "description": ["Calculates the Rand Index and the Adjusted Rand Index",
        "between two clusterings. The clustering format is a raw text file",
        "with one cluster per line, each defined as comma-delimited members,",
        "and a header line (ignored). Note that this is equivalent to the OGs",
        "format for 1 genome."],
      "see_also": ["ogs.mcl.rb"],
      "help_arg": "--help",
      "cite": [
        ["Rand, 1971, J Am Stat Assoc",
          "https://doi.org/10.2307%2F2284239"],
        ["Hubert & Arabie, 1985, J Classif",
          "https://doi.org/10.1007%2FBF01908075"]
      ],
      "options": [
        {
          "name": "Input file 1",
          "opt": "--clust1",
          "arg": "in_file",
          "mandatory": true,
          "description": "First input file."
        },
        {
          "name": "Input file 2",
          "opt": "--clust2",
          "arg": "in_file",
          "mandatory": true,
          "description": "Second input file."
        },
        {
          "name": "Precision",
          "opt": "--prec",
          "arg": "integer",
          "description": "Precision to report.",
          "default": 6
        },
        {
          "opt": "--quiet",
          "description": "Run quietly (no STDERR output)."
        }
      ]
    }
  ]
}
