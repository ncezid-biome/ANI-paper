#!/usr/bin/env ruby

#
# @author: Luis M. Rodriguez-R
# @update: Mar-23-2015
# @license: artistic license 2.0
#

$:.push File.expand_path(File.dirname(__FILE__) + '/lib')
require 'enveomics_rb/og'
require 'optparse'

o = {:q=>FALSE, :f=>"(\\S+)\\.txt", :consolidate=>TRUE, :pre=>[]}
ARGV << '-h' if ARGV.size==0
OptionParser.new do |opts|
   opts.banner = "
Annotates Orthology Groups (OGs) using one or more reference genomes.

Usage: #{$0} [options]"
   opts.separator ""
   opts.separator "Mandatory"
   opts.on("-i", "--in FILE", "Input file containing the OGs (as generated by ogs.rb)."){ |v| o[:in]=v }
   opts.on("-o", "--out FILE", "Output file containing the annotated OGs."){ |v| o[:out]=v }
   opts.on("-a FILE1,FILE2,...", Array, "Input file(s) containing the annotations.One or more tab-delimited files",
   		"with the gene names in the first column and the annotation in the second."){ |v| o[:annotations]=v }
   opts.separator ""
   opts.separator "Other Options"
   opts.on("-f","--format STRING", "Format of the filenames for the annotation files, using regex syntax.",
   		"By default: '#{o[:f]}'."){ |v| o[:f]=v }
   opts.on("-q", "--quiet", "Run quietly (no STDERR output)."){ o[:q] = TRUE }
   opts.on("-h", "--help", "Display this screen.") do
      puts opts
      exit
   end
   opts.separator ""
end.parse!
abort "-i is mandatory" if o[:in].nil?
abort "-o is mandatory" if o[:out].nil?
abort "-a is mandatory" if o[:annotations].nil?

##### MAIN:
begin
   # Read the pre-computed OGs
   collection = OGCollection.new
   $stderr.puts "Reading pre-computed OGs in '#{o[:in]}'." unless o[:q]
   f = File.open(o[:in], 'r')
   h = f.gets.chomp.split /\t/
   while ln = f.gets
      collection << OG.new(h, ln.chomp.split(/\t/))
   end
   f.close
   $stderr.puts " Loaded OGs: #{collection.ogs.length}." unless o[:q]

   # Read annotations
   o[:annotations].each do |annot|
      m = /#{o[:f]}/.match(annot)
      if m.nil? or m[1].nil?
	 warn "Cannot parse filename: #{rbm_file} (doesn't match /#{o[:f]}/)."
	 next
      end
      f = File.open(annot, 'r')
      no_og = 0
      collection.add_note_src m[1]+' annotation'
      while ln=f.gets
	 r = ln.chomp.split /\t/
	 g = Gene.new m[1], r[0]
	 og = collection.get_og g
	 if og.nil?
	    no_og += 1
	 else
	    og.add_note g.id + ': ' + r[1], collection.note_srcs.length-1
	 end
      end
      warn "Warning: Cannot find #{no_og} genes from #{m[1]} in OG collection." if no_og>0
   end 
   # Save the output matrix
   $stderr.puts "Saving annotated OGs into '#{o[:out]}'." unless o[:q]
   f = File.open(o[:out], "w")
   f.puts collection.to_s
   f.close
   $stderr.puts "Done.\n" unless o[:q] 
rescue => err
   $stderr.puts "Exception: #{err}\n\n"
   err.backtrace.each { |l| $stderr.puts l + "\n" }
   err
end


